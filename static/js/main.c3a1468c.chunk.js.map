{"version":3,"sources":["components/randoPassword.js","App.js","reportWebVitals.js","index.js"],"names":["App2","props","getCriteria","options","window","confirm","state","upper","lower","number","special","setState","values","complexity","prompt","alert","password","i","charAt","Math","floor","random","length","sendInfo","className","id","onClick","this","Component","App","console","log","readOnly","placeholder","aria-label","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPA0FeA,E,kDArFb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAaRC,YAAc,WAChB,IAAIC,EAAS,GAEMC,OAAOC,QAAQ,sDAEjCF,GAAW,EAAKG,MAAMC,OAIJH,OAAOC,QAAS,qDAE/BF,GAAW,EAAKG,MAAME,OAGRJ,OAAOC,QAAS,2CAE9BF,GAAW,EAAKG,MAAMG,QAERL,OAAOC,QAAS,sDAE9BF,GAAW,EAAKG,MAAMI,SAE1B,EAAKC,SAAS,CAACC,OAAQT,IAAU,WAC7B,IAAIU,EAERC,OAAO,0KAEP,GAAID,EAAa,EAEjB,OADAE,MAAM,kDACC,MAGP,GAAIF,EAAa,IAEjB,OADAE,MAAM,qEACC,MAKP,IAFA,IAAIC,EAAS,GAELC,EAAE,EAAGA,GAAKJ,EAAYI,IAE9BD,GAAY,EAAKV,MAAMM,OAAOM,OAAOC,KAAKC,MAAMD,KAAKE,SAAUF,KAAKC,MAAM,EAAKd,MAAMM,OAAOU,OAAO,KAInG,EAAKrB,MAAMsB,SAASP,OAzDhB,EAAKV,MAAQ,CAETC,MAAO,6BACPC,MAAO,6BACPC,OAAQ,aACRC,QAAS,kCACTE,OAAQ,GACRI,SAAU,IATE,E,0CA0ElB,WAGE,OACI,qBAAKQ,UAAU,cAAf,SACA,wBAAQC,GAAG,WAAWD,UAAU,MAAME,QAASC,KAAKzB,YAApD,qC,GAhFW0B,aC2CJC,E,4MAzCbvB,MAAM,CACJU,SAAU,I,EAGZO,SAAW,SAACP,GACVc,QAAQC,IAAIf,GACZ,EAAKL,SAAS,CACZK,SAASA,K,4CAGb,WACE,OACJ,sBAAKQ,UAAU,UAAf,UACM,iCACE,sDAGF,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,uDAGF,qBAAKA,UAAU,YAAf,SACE,0BACEQ,UAAQ,EACRP,GAAG,WACHQ,YAAY,uBACZC,aAAW,qBACXC,MAAOR,KAAKrB,MAAMU,aAIxB,cAAE,EAAF,CAAOO,SAAUI,KAAKJ,cAElB,qBAAKE,GAAG,kB,GApCAG,aCQHQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c3a1468c.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\n\nclass App2 extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        // initial state for pwd length and all char bools\n        upper: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n        lower: \"abcdefghijklmnopqrstuvwxyz\",\n        number: \"0123456789\",\n        special: \"!#$%&'()*+,-./:;<=>?@[]]^_`\\{|}~\",\n        values: \"\",\n        password: \"\"  \n    }\n\n}\n\n  getCriteria = () => {\nlet options= \"\"\n// ask all prompts and confirms preceded by window.\nvar upperConfirm = window.confirm(\"Do you want upppercase letters in your password?\");\nif (upperConfirm){\n options += this.state.upper\n\n}\n\nvar lowerConfirm = window.confirm (\"Do you want lowercase letters in your password?\");\nif (lowerConfirm){\n    options += this.state.lower\n  \n}\nvar numbConfirm = window.confirm (\"Do you want numbers in your password?\");\nif (numbConfirm){\n    options += this.state.number\n}\nvar specConfirm = window.confirm (\"Do you want special characters in your password?\");\nif (specConfirm){\n    options += this.state.special\n}\nthis.setState({values: options}, ()=> {\n    var complexity =   \n\nprompt(\"How long do you want your password to be (8-128 characters)? Passwords will automatically generate with uppercase, lowercase letters, special characters, and numbers.\");\n\nif (complexity < 8) {\nalert(\"Password must be between 8 and 128 characters.\");\nreturn \"n/a\";\n}\n\nif (complexity > 128){\nalert(\"Easy there, champ. Password must be between 8 and 128 characters.\");\nreturn \"n/a\";\n}\n\nlet password=\"\"\n// create for loop to choose password characters\nfor(var i=1; i <= complexity; i++){\n\npassword += this.state.values.charAt(Math.floor(Math.random()* Math.floor(this.state.values.length-1)))\n\n};\n\nthis.props.sendInfo(password);\n})\n\n \n// this.setState({}) all the values from above\n\n//   set password length / complexity\n\n\n}\n\n      \n\n  \n  // add all your methods for generating a password from the above state\n  render(){\n\n    // run all the above methods to calculate the password before rendering    \n    return (\n        <div className=\"card-footer\">\n        <button id=\"generate\" className=\"btn\" onClick={this.getCriteria}>Generate Password</button>\n      </div>\n    )\n  };\n}\n\nexport default App2;","import './App.css';\nimport App2 from './components/randoPassword';\nimport { Component } from 'react';\n\nclass App extends Component {\n\n  state={\n    password: \"\",\n  }\n\n  sendInfo = (password) => {\n    console.log(password)\n    this.setState({\n      password:password\n    })\n  }\n  render() {\n    return (\n<div className=\"wrapper\">\n      <header>\n        <h1>Password Generator</h1>\n      </header>\n      \n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h2>Generate a Password</h2>\n        </div>\n        \n        <div className=\"card-body\">\n          <textarea\n            readOnly\n            id=\"password\"\n            placeholder=\"Your Secure Password\"\n            aria-label=\"Generated Password\"\n            value={this.state.password}\n          ></textarea>\n        </div>\n        \n      < App2 sendInfo={this.sendInfo}/>\n      </div>\n          <div id=\"length\"></div>\n    </div>\n    )\n  }\n}\n  \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}